AWSTemplateFormatVersion: 2010-09-09

Description: Resources used in the Scaling Web Applications lab

Parameters:

  StagingBucket:
    Type: String
    Default: staging-scalingwebapps
    Description: The name of the S3 bucket that contains the staging resources for this deployment

  DBSnapshotArn:
    Type: String
    Default: arn:aws:rds:us-west-2:617055091360:snapshot:amznreviews-indexed
    Description: The ARN of the snapshot to restore to the RDS instance

Resources:

  ApplicationComputeVPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: 192.168.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
  
  ApplicationSubnetA:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref ApplicationComputeVPC
      CidrBlock: 192.168.0.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select 
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'

  ApplicationSubnetB:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref ApplicationComputeVPC
      CidrBlock: 192.168.1.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select 
        - 1
        - Fn::GetAZs: !Ref 'AWS::Region'

  ApplicationSubnetC:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref ApplicationComputeVPC
      CidrBlock: 192.168.2.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select 
        - 2
        - Fn::GetAZs: !Ref 'AWS::Region'

  ApplicationInternetGateway:
    Type: 'AWS::EC2::InternetGateway'

  ApplicationInternetGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      InternetGatewayId: !Ref ApplicationInternetGateway
      VpcId: !Ref ApplicationComputeVPC

  ApplicationSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Rules for octank app layer network
      VpcId: !Ref ApplicationComputeVPC
      SecurityGroupIngress:
        - IpProtocol: '-1'
          FromPort: '-1'
          ToPort: '-1'
          CidrIp: 192.168.0.0/16

  ApplicationRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref ApplicationComputeVPC

  ApplicationSubnetARouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref ApplicationRouteTable
      SubnetId: !Ref ApplicationSubnetA

  ApplicationSubnetBRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref ApplicationRouteTable
      SubnetId: !Ref ApplicationSubnetB

  ApplicationSubnetCRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref ApplicationRouteTable
      SubnetId: !Ref ApplicationSubnetC

  ApplicationPublicTrafficRoute:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref ApplicationRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref ApplicationInternetGateway

  ApplicationDefaultDHCPOptions:
    Type: 'AWS::EC2::DHCPOptions'
    Properties:
      DomainNameServers:
        - 8.8.8.8

  ApplicationVPCDHCPOptions:
    Type: 'AWS::EC2::VPCDHCPOptionsAssociation'
    Properties:
      DhcpOptionsId: !Ref ApplicationDefaultDHCPOptions
      VpcId: !Ref ApplicationComputeVPC

  WebAppInstanceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: "2008-10-17"
        Statement:
          - Effect: Allow
            Action: "sts:AssumeRole"
            Principal:
              Service: ec2.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSElasticBeanstalkWebTier
        - arn:aws:iam::aws:policy/AWSElasticBeanstalkMulticontainerDocker
        - arn:aws:iam::aws:policy/AWSElasticBeanstalkWorkerTier
      Policies:
        - PolicyName: SetT3Unlimited
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              Sid: InstanceCreditPolicy
              Effect: Allow
              Action:
                - ec2:ModifyInstanceCreditSpecification
                - ec2:DescribeInstanceCreditSpecifications
              Resource: '*'

  ElasticBeanstalkServiceRole:
    Type: 'AWS::IAM::ServiceLinkedRole'
    Properties:
      AWSServiceName: elasticbeanstalk.amazonaws.com
      Description: "Allows Elastic Beanstalk to create and manage AWS resources on your behalf."

  WebAppInstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Roles:
       - !Ref WebAppInstanceRole

  WebApp:
    Type: "AWS::ElasticBeanstalk::Application"
    Properties:
      ApplicationName: DemoWebApp

  WebAppStartVersion:
    Type: AWS::ElasticBeanstalk::ApplicationVersion
    Properties:
      ApplicationName: !Ref WebApp
      Description: The initial version of the source code for the web app
      SourceBundle:
        S3Bucket: !Ref StagingBucket
        S3Key: web/start.zip

  WebAppCacheVersion:
    Type: AWS::ElasticBeanstalk::ApplicationVersion
    Properties:
      ApplicationName: !Ref WebApp
      Description: The second version of the source code that uses redis to cache responses
      SourceBundle:
        S3Bucket: !Ref StagingBucket
        S3Key: web/cache.zip

  WebAppAPIVersion:
    Type: AWS::ElasticBeanstalk::ApplicationVersion
    Properties:
      ApplicationName: !Ref WebApp
      Description: The third version of the source code that uses a serverless API layer
      SourceBundle:
        S3Bucket: !Ref StagingBucket
        S3Key: web/serverless_api.zip

  WebAppEnvironment:
    Type: "AWS::ElasticBeanstalk::Environment"
    Properties:
      ApplicationName: !Ref WebApp
      OptionSettings: 
        - Namespace: aws:autoscaling:launchconfiguration
          OptionName: IamInstanceProfile
          Value: !GetAtt WebAppInstanceProfile.Arn

        - Namespace: aws:elasticbeanstalk:environment
          OptionName: ServiceRole
          Value: !Sub arn:aws:iam::${AWS::AccountId}:role/aws-service-role/elasticbeanstalk.amazonaws.com/AWSServiceRoleForElasticBeanstalk

        - Namespace: aws:autoscaling:launchconfiguration
          OptionName: InstanceType
          Value: t3.medium

        - Namespace: aws:autoscaling:asg
          OptionName: MinSize
          Value: 2

        - Namespace: aws:autoscaling:asg
          OptionName: MaxSize
          Value: 4

        - Namespace: aws:autoscaling:asg
          OptionName: Cooldown
          Value: 60

        - Namespace: aws:autoscaling:trigger
          OptionName: BreachDuration
          Value: 1

        - Namespace: aws:autoscaling:trigger
          OptionName: Period
          Value: 1

        - Namespace: aws:autoscaling:trigger
          OptionName: MeasureName
          Value: CPUUtilization

        - Namespace: aws:autoscaling:trigger
          OptionName: UpperThreshold
          Value: 85

        - Namespace: aws:autoscaling:trigger
          OptionName: LowerThreshold
          Value: 50

        - Namespace: aws:ec2:vpc
          OptionName: VPCId
          Value: !Ref ApplicationComputeVPC

        - Namespace: aws:ec2:vpc
          OptionName: Subnets
          Value: !Sub ${ApplicationSubnetA},${ApplicationSubnetB},${ApplicationSubnetC}

        - Namespace: aws:ec2:vpc
          OptionName: ELBSubnets
          Value: !Sub ${ApplicationSubnetA},${ApplicationSubnetB},${ApplicationSubnetC}

        - Namespace: aws:autoscaling:launchconfiguration
          OptionName: SecurityGroups
          Value: !Ref WebServerSecurityGroup

        - Namespace: aws:elb:loadbalancer
          OptionName: SecurityGroups
          Value: !Ref WebServerSecurityGroup

        - Namespace: aws:elb:loadbalancer
          OptionName: CrossZone
          Value: true

        - Namespace: aws:elasticbeanstalk:application:environment
          OptionName: PORT
          Value: 80

        - Namespace: aws:elasticbeanstalk:application:environment
          OptionName: REGION_NAME
          Value: !Ref AWS::Region

        - Namespace: aws:elasticbeanstalk:container:nodejs
          OptionName: NodeCommand
          Value: "npm start"

        - Namespace: aws:elasticbeanstalk:container:nodejs
          OptionName: NodeVersion
          Value: "8.11.4"

        - Namespace: aws:elasticbeanstalk:container:nodejs
          OptionName: ProxyServer
          Value: nginx

        - Namespace: aws:elasticbeanstalk:container:nodejs:staticfiles
          OptionName: javascripts
          Value: public/javascripts

        - Namespace: aws:elasticbeanstalk:container:nodejs:staticfiles
          OptionName: images
          Value: public/javascripts

        - Namespace: aws:elasticbeanstalk:container:nodejs:staticfiles
          OptionName: stylesheets
          Value: public/javascripts

        - Namespace: aws:elasticbeanstalk:container:nodejs:staticfiles
          OptionName: static/bootstrap
          Value: node_modules/bootstrap/dist

        - Namespace: aws:elasticbeanstalk:container:nodejs:staticfiles
          OptionName: static/jquery
          Value: node_modules/jquery/dist

        - Namespace: aws:elasticbeanstalk:container:nodejs:staticfiles
          OptionName: static/popper
          Value: node_modules/popper.js/dist

        - Namespace: aws:elasticbeanstalk:application:environment
          OptionName: DB_SERVER
          Value: !GetAtt DatabaseServer.Endpoint.Address

        - Namespace: aws:elasticbeanstalk:application:environment
          OptionName: API_URL
          Value: !Sub "https://${APIGateway}.execute-api.${AWS::Region}.amazonaws.com"

        - Namespace: aws:elasticbeanstalk:application:environment
          OptionName: REDIS_ADDRESS
          Value: !GetAtt CacheCluster.RedisEndpoint.Address

        - Namespace: aws:elasticbeanstalk:healthreporting:system
          OptionName: SystemType
          Value: enhanced

      SolutionStackName: "64bit Amazon Linux 2018.03 v4.7.0 running Node.js"
      VersionLabel: !Ref WebAppStartVersion
    DependsOn:
      - ApplicationInternetGatewayAttachment
      - ElasticBeanstalkServiceRole

  DatabaseServer:
    Type: "AWS::RDS::DBInstance"
    Properties:
      AllocatedStorage: 40
      DBInstanceClass: db.t2.medium
      DBSubnetGroupName: !Ref DatabaseSubnetGroup
      Engine: mariadb
      EngineVersion: 10.3.8
      MasterUsername: Administrator 
      MasterUserPassword: WebApp2018!
      MultiAZ: true
      DBSnapshotIdentifier: !Ref DBSnapshotArn
      StorageType: gp2
      VPCSecurityGroups:
        - !Ref DBServerSecurityGroup

  DatabaseSubnetGroup:
    Type: "AWS::RDS::DBSubnetGroup"
    Properties: 
      DBSubnetGroupDescription: DemoWebAppDbSubnets
      DBSubnetGroupName: DemoWebAppDbSubnets
      SubnetIds:
        - !Ref ApplicationSubnetA
        - !Ref ApplicationSubnetB
        - !Ref ApplicationSubnetC

  WebServerSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties: 
      GroupName: Web Server Security Group
      GroupDescription: Rules applied to web servers
      SecurityGroupEgress:
        - IpProtocol: -1
          FromPort: -1
          ToPort: -1
          CidrIp: 0.0.0.0/0
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      VpcId: !Ref ApplicationComputeVPC

  DBServerSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties: 
      GroupName: Database Server Security Group
      GroupDescription: Rules applied to database servers
      SecurityGroupEgress:
        - IpProtocol: -1
          FromPort: -1
          ToPort: -1
          CidrIp: 0.0.0.0/0
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          CidrIp: 192.168.0.0/16
      VpcId: !Ref ApplicationComputeVPC

  PresentationLayerCDN:
    Type: 'AWS::CloudFront::Distribution'
    Properties:
      DistributionConfig:
        DefaultCacheBehavior:
          ForwardedValues:
            QueryString: 'false'
          TargetOriginId: MainSite
          ViewerProtocolPolicy: allow-all
          MinTTL: 0
          MaxTTL: 600
          DefaultTTL: 600
        CacheBehaviors:
          - PathPattern: data*
            ForwardedValues: 
              QueryString: true
            AllowedMethods: 
              - DELETE
              - GET
              - HEAD
              - OPTIONS
              - PATCH
              - POST
              - PUT
            TargetOriginId: MainSite
            ViewerProtocolPolicy: allow-all
            MinTTL: 0
            MaxTTL: 1
            DefaultTTL: 1
        Enabled: true
        Origins:
          - DomainName: !GetAtt WebAppEnvironment.EndpointURL
            CustomOriginConfig:
              HTTPPort: 80
              OriginProtocolPolicy: http-only
            Id: MainSite

  LoadTestAppInstanceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: "2008-10-17"
        Statement:
          - Effect: Allow
            Action: "sts:AssumeRole"
            Principal:
              Service: ec2.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSElasticBeanstalkWebTier
        - arn:aws:iam::aws:policy/AWSElasticBeanstalkMulticontainerDocker
        - arn:aws:iam::aws:policy/AWSElasticBeanstalkWorkerTier

  LoadTestAppInstancePolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: LocustPermissions
      Roles:
        - !Ref LoadTestAppInstanceRole
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - dynamodb:GetItem
              - dynamodb:UpdateItem
            Resource: !Sub "arn:aws:dynamodb:*:${AWS::AccountId}:table/*-stack-MasterIPTable*"
          - Effect: Allow
            Action:
              - elasticbeanstalk:DescribeEnvironmentResources
              - autoscaling:DescribeAutoScalingGroups
              - cloudformation:ListStackResources
            Resource: '*'

  LoadTestInstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Roles:
       - !Ref LoadTestAppInstanceRole

  LoadTestApp:
    Type: "AWS::ElasticBeanstalk::Application"
    Properties:
      ApplicationName: LoadTester

  LoadTestStartVersion:
    Type: AWS::ElasticBeanstalk::ApplicationVersion
    Properties:
      ApplicationName: !Ref LoadTestApp
      Description: Locust including load tests configured for the first stage of testing
      SourceBundle:
        S3Bucket: !Ref StagingBucket
        S3Key: loadtest/start.zip

  LoadTestCloudFrontVersion:
    Type: AWS::ElasticBeanstalk::ApplicationVersion
    Properties:
      ApplicationName: !Ref LoadTestApp
      Description: Locust including load tests configured for the second stage of testing
      SourceBundle:
        S3Bucket: !Ref StagingBucket
        S3Key: loadtest/cloudfront.zip

  LoadTestAPIVersion:
    Type: AWS::ElasticBeanstalk::ApplicationVersion
    Properties:
      ApplicationName: !Ref LoadTestApp
      Description: Locust including load tests configured for the third stage of testing
      SourceBundle:
        S3Bucket: !Ref StagingBucket
        S3Key: loadtest/serverless_api.zip

  LoadTestAppEnvironment:
    Type: "AWS::ElasticBeanstalk::Environment"
    Properties:
      ApplicationName: !Ref LoadTestApp
      OptionSettings: 
        - Namespace: aws:autoscaling:launchconfiguration
          OptionName: IamInstanceProfile
          Value: !GetAtt LoadTestInstanceProfile.Arn

        - Namespace: aws:elasticbeanstalk:environment
          OptionName: ServiceRole
          Value: !Sub arn:aws:iam::${AWS::AccountId}:role/aws-service-role/elasticbeanstalk.amazonaws.com/AWSServiceRoleForElasticBeanstalk

        - Namespace: aws:autoscaling:launchconfiguration
          OptionName: InstanceType
          Value: t3.2xlarge

        - Namespace: aws:elasticbeanstalk:application:environment
          OptionName: PORT
          Value: 80

        - Namespace: aws:elasticbeanstalk:application:environment
          OptionName: TARGET_URL
          Value: !Sub "http://${WebAppEnvironment.EndpointURL}"

        - Namespace: aws:elasticbeanstalk:application:environment
          OptionName: CLOUDFRONT_URL
          Value: !Sub "http://${PresentationLayerCDN.DomainName}"

        - Namespace: aws:elasticbeanstalk:application:environment
          OptionName: API_URL
          Value: !Sub "https://${APIGateway}.execute-api.${AWS::Region}.amazonaws.com"

        - Namespace: aws:autoscaling:asg
          OptionName: MinSize
          Value: 1

        - Namespace: aws:autoscaling:asg
          OptionName: MaxSize
          Value: 1

        - Namespace: aws:elasticbeanstalk:healthreporting:system
          OptionName: SystemType
          Value: enhanced

      SolutionStackName: "64bit Amazon Linux 2018.03 v2.7.7 running Java 8"
      VersionLabel: !Ref LoadTestStartVersion
    DependsOn:
      - ElasticBeanstalkServiceRole
      - LoadTestAppInstancePolicy

  CacheSubnetGroup:
    Type: AWS::ElastiCache::SubnetGroup
    Properties:
      Description: Subnets used by the web app scaling lab cache
      SubnetIds:
        - !Ref ApplicationSubnetA
        - !Ref ApplicationSubnetB
        - !Ref ApplicationSubnetC

  CacheSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties: 
      GroupDescription: Rules applied to cache instances
      SecurityGroupEgress:
        - IpProtocol: -1
          FromPort: -1
          ToPort: -1
          CidrIp: 0.0.0.0/0
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 6379
          ToPort: 6379
          CidrIp: 192.168.0.0/16
      VpcId: !Ref ApplicationComputeVPC

  CacheCluster:
    Type: AWS::ElastiCache::CacheCluster
    Properties:
      CacheNodeType: cache.t2.micro
      CacheSubnetGroupName: !Ref CacheSubnetGroup
      Engine: redis
      NumCacheNodes: 1
      VpcSecurityGroupIds:
        - !Ref CacheSecurityGroup

  DataStoreTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      TableName: LoadTestDataStore
      KeySchema:
        - AttributeName: product_id
          KeyType: HASH
        - AttributeName: total_reviews
          KeyType: RANGE
      AttributeDefinitions:
        - AttributeName: product_id
          AttributeType: S
        - AttributeName: total_reviews
          AttributeType: N
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  LambdaSetupRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: dynamodbAccessRole
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - dynamodb:*
              Resource: "*"
            - Effect: Allow
              Action:
              - logs:*
              Resource: "*"

  SetupFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: >
          var AWS = require('aws-sdk');
          const response = require("cfn-response");
          var ddb = new AWS.DynamoDB();

          exports.handler = async (event, context) => {
            console.log(JSON.stringify(event));
            function postResponse(event, context, status, data){
                return new Promise((resolve, reject) => {
                    setTimeout(() => response.send(event, context, status, data), 5000)
                });
            }
            await ddb.batchWriteItem({
              RequestItems: {
                "LoadTestDataStore": JSON.parse(event.ResourceProperties.DataToAdd)
              }
            }).promise().then(await postResponse(event, context, "SUCCESS", {}));
          };
      Handler: index.handler
      Role: !GetAtt LambdaSetupRole.Arn
      Runtime: nodejs8.10
      Timeout: 60

  LambdaLookupRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: LookupRole
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - elasticloadbalancing:*
              - autoscaling:*
              - logs:*
              Resource: "*"

  LookupFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: >
          var AWS = require('aws-sdk'), elb = new AWS.ELB(), autoscaling = new AWS.AutoScaling();
          const response = require("cfn-response");

          exports.handler = async (event, context) => {
            console.log(JSON.stringify(event));

            function postResponse(event, context, status, data){
                return new Promise((resolve, reject) => {
                    setTimeout(() => response.send(event, context, status, data), 5000)
                });
            }

            const data = {};
            await elb.describeLoadBalancers({}).promise().then((r) => {
                data.ELBName = r.LoadBalancerDescriptions.find(obj => obj.DNSName == event.ResourceProperties.DNSName).LoadBalancerName
            });
            await autoscaling.describeAutoScalingGroups({}).promise().then((r) => {
              data.ASGName = r.AutoScalingGroups.find(obj => obj.LoadBalancerNames.includes(data.ELBName)).AutoScalingGroupName; 
            });
            await postResponse(event, context, "SUCCESS", data);
          };
      Handler: index.handler
      Role: !GetAtt LambdaLookupRole.Arn
      Runtime: nodejs8.10
      Timeout: 60

  WebAppConfigValues:
    Type: Custom::DataLookupFunction
    DependsOn:
     - WebAppEnvironment
    Properties:
      ServiceToken: !GetAtt LookupFunction.Arn
      DNSName: !GetAtt WebAppEnvironment.EndpointURL 

  QueryFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: >
          var AWS = require('aws-sdk');
          var ddb = new AWS.DynamoDB();

          exports.handler = async (event) => {
          var result = {};
          await ddb.scan({
            TableName: 'LoadTestDataStore'
          }).promise().then((response) => {result = response;});
          return result;
          };
      Handler: index.handler
      Role: !GetAtt LambdaSetupRole.Arn
      Runtime: nodejs8.10
      Timeout: 60

  QueryFunctionMethodPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${APIGateway}/*/GET/"
      FunctionName: !GetAtt QueryFunction.Arn
      Principal: apigateway.amazonaws.com

  InitializeDynamoDB:
    Type: Custom::InitFunction
    DependsOn:
     - DataStoreTable
     - DatabaseServer # There is no good reason for this other than to delay it, as if it hits too quick it doesn't populate
    Properties:
      ServiceToken: !GetAtt SetupFunction.Arn
      DataToAdd: > 
        [
          { "PutRequest": { "Item": { "product_id": {"S": "B005NLQAHS" }, "total_reviews": {"N": "4338"}, "product_title": {"S": "BAFX Products 34t5 Bluetooth OBDII Scan Tool for Android Devices"}}}},
          { "PutRequest": { "Item": { "product_id": {"S": "B000CITK8S" }, "total_reviews": {"N": "3234"}, "product_title": {"S": "Battery Tender Jr. Battery Charger"}}}},
          { "PutRequest": { "Item": { "product_id": {"S": "B001LHVOVK" }, "total_reviews": {"N": "2539"}, "product_title": {"S": "Autel MaxiScan MS300 CAN Diagnostic Scan Tool for OBDII Vehicles"}}}},
          { "PutRequest": { "Item": { "product_id": {"S": "B00BYH6C1E" }, "total_reviews": {"N": "1886"}, "product_title": {"S": "Drop Stop - The Original Patented Car Seat Gap Filler - Set of 2 (AS SEEN ON SHARK TANK)"}}}},
          { "PutRequest": { "Item": { "product_id": {"S": "B0052SF0LO" }, "total_reviews": {"N": "1787"}, "product_title": {"S": "Sunforce 82156 60-LED Solar Motion Light"}}}},
          { "PutRequest": { "Item": { "product_id": {"S": "B00068XCQU" }, "total_reviews": {"N": "1762"}, "product_title": {"S": "Battery Tender Plus 021-0128, 1.25 Amp Battery Charger is a Smart Charger, it will Fully Charge and Maintain a Battery at Proper Storage Voltage without the Damaging Effects Caused by Trickle Chargers"}}}},
          { "PutRequest": { "Item": { "product_id": {"S": "B001AIZ5HY" }, "total_reviews": {"N": "1521"}, "product_title": {"S": "3M 39008 Headlight Lens Restoration System"}}}},
          { "PutRequest": { "Item": { "product_id": {"S": "B00E5OUOCQ" }, "total_reviews": {"N": "1511"}, "product_title": {"S": "X-Shade Jumbo Sun Shade for Car windshield Comes with Cool Non-slip Pad"}}}},
          { "PutRequest": { "Item": { "product_id": {"S": "B003IS3HV0" }, "total_reviews": {"N": "1497"}, "product_title": {"S": "Leather Honey Leather Conditioner, Best Leather Conditioner Since 1968. For Use on Leather Apparel, Furniture, Auto Interiors, Shoes, Bags and Accessories. Non-Toxic and Made in the USA!"}}}},
          { "PutRequest": { "Item": { "product_id": {"S": "B00080QHMM" }, "total_reviews": {"N": "1493"}, "product_title": {"S": "Accutire MS-4021B Digital Tire Pressure Gauge"}}}},
          { "PutRequest": { "Item": { "product_id": {"S": "B00877SL2M" }, "total_reviews": {"N": "1401"}, "product_title": {"S": "LED Car Lights Bulb"}}}},
          { "PutRequest": { "Item": { "product_id": {"S": "B000JFJLP6" }, "total_reviews": {"N": "1368"}, "product_title": {"S": "Jump-N-Carry"}}}},
          { "PutRequest": { "Item": { "product_id": {"S": "B00CASDZKC" }, "total_reviews": {"N": "1346"}, "product_title": {"S": "Car Seat Protector with Built-in Trash Can BABYSEATER - Carseat Cover Perfect For Pet, Baby & Toddler Kids. Garbage Basket to Keep Car Clean & Organizer Gift For Christmas"}}}},
          { "PutRequest": { "Item": { "product_id": {"S": "B00429NKWK" }, "total_reviews": {"N": "1268"}, "product_title": {"S": "SYLVANIA Headlight Restoration Kit"}}}},
          { "PutRequest": { "Item": { "product_id": {"S": "B00GSAUHB8" }, "total_reviews": {"N": "1260"}, "product_title": {"S": "sun shade"}}}},
          { "PutRequest": { "Item": { "product_id": {"S": "B00G620ZVU" }, "total_reviews": {"N": "1256"}, "product_title": {"S": "Nilight Driving Fog Light Off Road Led Lights Bar"}}}},
          { "PutRequest": { "Item": { "product_id": {"S": "B0051D3MP6" }, "total_reviews": {"N": "1226"}, "product_title": {"S": "BLACK+DECKER BM3B 6V and 12V Battery Charger / Maintainer"}}}},
          { "PutRequest": { "Item": { "product_id": {"S": "B001EAQTRI" }, "total_reviews": {"N": "1212"}, "product_title": {"S": "PAC SNI-1/3.5 3.5-mm Ground Loop Noise Isolator Works with iPod/Zune/iRiver and Others"}}}},
          { "PutRequest": { "Item": { "product_id": {"S": "B00651CLCS" }, "total_reviews": {"N": "1199"}, "product_title": {"S": "AntennaX Off-Road (13-inch) Antenna for (07 thru 18) Jeep Wrangler JK"}}}},
          { "PutRequest": { "Item": { "product_id": {"S": "B001GJ3FIS" }, "total_reviews": {"N": "1182"}, "product_title": {"S": "Viking 912600 8-Way Heavy Duty Spray Nozzle"}}}},
          { "PutRequest": { "Item": { "product_id": {"S": "B003VLBPJA" }, "total_reviews": {"N": "1164"}, "product_title": {"S": "Heavy-Duty 15\" Cargo Net for Motorcycles, ATVs - Stretches to 30\""}}}},
          { "PutRequest": { "Item": { "product_id": {"S": "B00COYNZJ8" }, "total_reviews": {"N": "1161"}, "product_title": {"S": "Star Wars Basic Vehicle Accessory Kit"}}}},
          { "PutRequest": { "Item": { "product_id": {"S": "B00D9C2CDO" }, "total_reviews": {"N": "1151"}, "product_title": {"S": "Keeper 07208 Black Waterproof Hitch Rack Bag (11 Cubic Feet)"}}}},
          { "PutRequest": { "Item": { "product_id": {"S": "B005EJGSQ2" }, "total_reviews": {"N": "1150"}, "product_title": {"S": "AmazonBasics 12-Volt Black Heated Seat Cushion with 3-way Temperature Controller"}}}},
          { "PutRequest": { "Item": { "product_id": {"S": "B000EVYGZA" }, "total_reviews": {"N": "1096"}, "product_title": {"S": "INNOVA 3320 Auto-Ranging Digital Multimeter"}}}}             
        ]

  APIGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Body:
        swagger: 2.0
        info:
          title: ServerlessAPIExample
        basePath: /latest
        schemes:
          - "https"
        paths:
          /:
            get:
              consumes:
                - application/json
              produces:
                - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
              security:
              - sigv4: []
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                        method.response.header.Access-Control-Allow-Origin: "'*'"
                uri:
                  !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${QueryFunction.Arn}/invocations"
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws
            options:
              consumes:
                - application/json
              produces:
                - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Headers:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Origin:
                      type: "string"
              x-amazon-apigateway-integration:
                type: mock
                passthroughBehavior: never
                requestTemplates:
                  application/json: '{"statusCode": 200}'
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Methods: "'GET,POST,OPTIONS,DELETE'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    responseTemplates:
                      application/json: ''

  APIStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      DeploymentId: !Ref APIDeployment
      RestApiId: !Ref APIGateway
      StageName: latest

  APIDeployment:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref APIGateway

  PerformanceDashboard:
    Type: AWS::CloudWatch::Dashboard
    Properties:
      DashboardName: WebAppPerformance
      DashboardBody: !Sub >
        {
          "widgets": [
              {
                  "type": "metric",
                  "x": 0,
                  "y": 0,
                  "width": 9,
                  "height": 6,
                  "properties": {
                      "metrics": [
                          [ "AWS/ELB", "Latency", "LoadBalancerName", "${WebAppConfigValues.ELBName}", { "stat": "Average" } ],
                          [ ".", "RequestCount", ".", ".", { "yAxis": "right" } ],
                          [ ".", "HealthyHostCount", ".", ".", { "stat": "Maximum", "yAxis": "left" } ]
                      ],
                      "view": "timeSeries",
                      "stacked": false,
                      "region": "us-west-2",
                      "stat": "Sum",
                      "period": 60,
                      "title": "Load Balancer Requests"
                  }
              },
              {
                  "type": "metric",
                  "x": 0,
                  "y": 6,
                  "width": 9,
                  "height": 6,
                  "properties": {
                      "metrics": [
                          [ "AWS/RDS", "CPUUtilization", "DBInstanceIdentifier", "${DatabaseServer}" ],
                          [ ".", "DatabaseConnections", ".", ".", { "stat": "Sum", "yAxis": "right" } ]
                      ],
                      "view": "timeSeries",
                      "stacked": false,
                      "region": "us-west-2",
                      "stat": "Average",
                      "period": 60,
                      "title": "Database Performance",
                      "yAxis": {
                          "left": {
                              "label": "CPU"
                          },
                          "right": {
                              "label": "Connection"
                          }
                      }
                  }
              },
              {
                  "type": "metric",
                  "x": 9,
                  "y": 6,
                  "width": 9,
                  "height": 6,
                  "properties": {
                      "metrics": [
                          [ "AWS/RDS", "ReadThroughput", "DBInstanceIdentifier", "${DatabaseServer}" ],
                          [ ".", "NetworkReceiveThroughput", ".", ".", { "yAxis": "right" } ],
                          [ ".", "NetworkTransmitThroughput", ".", ".", { "yAxis": "right" } ]
                      ],
                      "view": "timeSeries",
                      "stacked": false,
                      "region": "us-west-2",
                      "stat": "Sum",
                      "period": 60,
                      "yAxis": {
                          "left": {
                              "label": "IOPS"
                          },
                          "right": {
                              "label": "Latency"
                          }
                      },
                      "title": "Database read performance"
                  }
              },
              {
                  "type": "metric",
                  "x": 9,
                  "y": 0,
                  "width": 9,
                  "height": 6,
                  "properties": {
                      "metrics": [
                          [ "AWS/EC2", "CPUUtilization", "AutoScalingGroupName", "${WebAppConfigValues.ASGName}" ],
                          [ ".", "NetworkPacketsOut", ".", ".", { "yAxis": "right", "stat": "Sum" } ]
                      ],
                      "view": "timeSeries",
                      "stacked": false,
                      "region": "us-west-2",
                      "stat": "Average",
                      "period": 60,
                      "title": "EC2 Performance"
                  }
              }
          ]
        }

  CacheDashboard:
    Type: AWS::CloudWatch::Dashboard
    Properties:
      DashboardName: WebAppCachedPerformance
      DashboardBody: !Sub >
        {
          "widgets": [
              {
                  "type": "metric",
                  "x": 0,
                  "y": 0,
                  "width": 9,
                  "height": 6,
                  "properties": {
                      "metrics": [
                          [ "AWS/ELB", "Latency", "LoadBalancerName", "${WebAppConfigValues.ELBName}", { "stat": "Average" } ],
                          [ ".", "RequestCount", ".", ".", { "yAxis": "right" } ],
                          [ ".", "HealthyHostCount", ".", ".", { "stat": "Maximum", "yAxis": "left" } ]
                      ],
                      "view": "timeSeries",
                      "stacked": false,
                      "region": "us-west-2",
                      "stat": "Sum",
                      "period": 60,
                      "title": "Load Balancer Requests"
                  }
              },
              {
                  "type": "metric",
                  "x": 0,
                  "y": 6,
                  "width": 9,
                  "height": 6,
                  "properties": {
                      "metrics": [
                          [ "AWS/RDS", "CPUUtilization", "DBInstanceIdentifier", "${DatabaseServer}" ],
                          [ ".", "DatabaseConnections", ".", ".", { "stat": "Sum", "yAxis": "right" } ]
                      ],
                      "view": "timeSeries",
                      "stacked": false,
                      "region": "us-west-2",
                      "stat": "Average",
                      "period": 60,
                      "title": "Database Performance",
                      "yAxis": {
                          "left": {
                              "label": "CPU"
                          },
                          "right": {
                              "label": "Connection"
                          }
                      }
                  }
              },
              {
                  "type": "metric",
                  "x": 9,
                  "y": 6,
                  "width": 9,
                  "height": 6,
                  "properties": {
                      "metrics": [
                          [ "AWS/ElastiCache", "CacheHits", "CacheClusterId", "${CacheCluster}", "CacheNodeId", "0001" ],
                          [ ".", "CacheMisses", ".", ".", ".", "." ],
                          [ ".", "CPUUtilization", ".", ".", ".", ".", { "yAxis": "right", "stat": "Average" } ]
                      ],
                      "view": "timeSeries",
                      "stacked": false,
                      "region": "us-west-2",
                      "stat": "Sum",
                      "period": 60,
                      "yAxis": {
                          "left": {
                              "label": "IOPS"
                          },
                          "right": {
                              "label": "Latency"
                          }
                      },
                      "title": "Redis Performance"
                  }
              },
              {
                  "type": "metric",
                  "x": 9,
                  "y": 0,
                  "width": 9,
                  "height": 6,
                  "properties": {
                      "metrics": [
                          [ "AWS/EC2", "CPUUtilization", "AutoScalingGroupName", "${WebAppConfigValues.ASGName}" ],
                          [ ".", "NetworkPacketsOut", ".", ".", { "yAxis": "right", "stat": "Sum" } ]
                      ],
                      "view": "timeSeries",
                      "stacked": false,
                      "region": "us-west-2",
                      "stat": "Average",
                      "period": 60,
                      "title": "EC2 Performance"
                  }
              }
          ]
        }

  ServerlessDashboard:
    Type: AWS::CloudWatch::Dashboard
    Properties:
      DashboardName: ServerlessPerformance
      DashboardBody: !Sub >
        {
          "widgets": [
              {
                  "type": "metric",
                  "x": 0,
                  "y": 0,
                  "width": 9,
                  "height": 6,
                  "properties": {
                      "metrics": [
                          [ "AWS/DynamoDB", "ProvisionedReadCapacityUnits", "TableName", "LoadTestDataStore", { "period": 300 } ],
                          [ ".", "ConsumedReadCapacityUnits", ".", ".", { "stat": "Sum" } ]
                      ],
                      "view": "timeSeries",
                      "stacked": false,
                      "region": "us-west-2",
                      "stat": "Average",
                      "period": 60,
                      "title": "DynamoDB Read Performance"
                  }
              },
              {
                  "type": "metric",
                  "x": 9,
                  "y": 0,
                  "width": 9,
                  "height": 6,
                  "properties": {
                      "metrics": [
                          [ "AWS/ApiGateway", "IntegrationLatency", "ApiName", "ServerlessAPIExample", { "yAxis": "right", "stat": "Average" } ],
                          [ ".", "CacheMissCount", ".", "." ],
                          [ ".", "CacheHitCount", ".", "." ],
                          [ ".", "Count", ".", "." ],
                          [ ".", "Latency", ".", ".", { "yAxis": "right", "stat": "Average" } ]
                      ],
                      "view": "timeSeries",
                      "stacked": false,
                      "region": "us-west-2",
                      "stat": "Sum",
                      "period": 60,
                      "title": "API Gateway Performance"
                  }
              },
              {
                  "type": "metric",
                  "x": 0,
                  "y": 6,
                  "width": 9,
                  "height": 6,
                  "properties": {
                      "metrics": [
                          [ "AWS/Lambda", "Invocations", "FunctionName", "${QueryFunction}", { "stat": "Sum" } ],
                          [ ".", "Duration", ".", ".", { "yAxis": "right" } ]
                      ],
                      "view": "timeSeries",
                      "stacked": false,
                      "region": "us-west-2",
                      "stat": "Average",
                      "period": 60,
                      "title": "Lambda Query Function Performance"
                  }
              }
          ]
        }

Outputs:
  LoadBalancerUrl:
    Value: !Sub "http://${WebAppEnvironment.EndpointURL}"
    Description: The URL of the main load balancer to browse the web app
  LoadTestUrl:
    Value: !Sub "http://${LoadTestAppEnvironment.EndpointURL}"
    Description: The URL of the load tester app
  CloudFrontUrl:
    Value: !Sub "http://${PresentationLayerCDN.DomainName}"
    Description: The URL of the CloudFront distribution used to distribute the site
  ApiGatewayUrl:
    Value: !Sub "https://${APIGateway}.execute-api.${AWS::Region}.amazonaws.com"
    Description: The URL of the API Gateway that provides a serverless API layer
  WebAppDashboard:
    Value: !Sub "https://${AWS::Region}.console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#dashboards:name=WebAppPerformance"
    Description: The URL to the dashboard that monitors performance of the main web app
  WebAppCacheDashboard:
    Value: !Sub "https://${AWS::Region}.console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#dashboards:name=WebAppCachedPerformance"
    Description: The URL to the dashboard that monitors performance of the main web app with caching enabled
  ServerlessDashboard:
    Value: !Sub "https://${AWS::Region}.console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#dashboards:name=ServerlessPerformance"
    Description: The URL to the dashboard that monitors the performance of the serverless API
